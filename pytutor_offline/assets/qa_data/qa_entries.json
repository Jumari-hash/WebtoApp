[
  {
    "id": 1,
    "question": "What is a loop in Python?",
    "answer": "A loop is a programming structure that repeats a block of code multiple times. Python has two main types: for loops (iterate over sequences) and while loops (repeat while a condition is true).",
    "category": "Control Flow",
    "codeExample": "for i in range(5):\n    print(i)\n\ncount = 0\nwhile count < 5:\n    print(count)\n    count += 1",
    "keywords": ["loop", "for", "while", "iteration", "repeat"]
  },
  {
    "id": 2,
    "question": "How do I create a class in Python?",
    "answer": "Use the 'class' keyword followed by the class name. Classes are blueprints for creating objects with attributes and methods.",
    "category": "OOP",
    "codeExample": "class Dog:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n    \n    def bark(self):\n        print(f'{self.name} says woof!')\n\nmy_dog = Dog('Buddy', 3)\nmy_dog.bark()",
    "keywords": ["class", "object", "oop", "instance", "method"]
  },
  {
    "id": 3,
    "question": "What are list methods in Python?",
    "answer": "List methods are built-in functions that operate on lists. Common methods include: append() to add items, remove() to delete items, sort() to order items, and extend() to combine lists.",
    "category": "Data Structures",
    "codeExample": "fruits = ['apple', 'banana']\nfruits.append('cherry')  # Add to end\nfruits.insert(0, 'orange')  # Insert at index\nfruits.remove('banana')  # Remove item\nfruits.sort()  # Sort alphabetically\nprint(fruits)",
    "keywords": ["list", "methods", "append", "remove", "sort", "extend"]
  },
  {
    "id": 4,
    "question": "How do I read a file in Python?",
    "answer": "Use the open() function with 'r' mode to read a file. The 'with' statement ensures the file is properly closed after reading.",
    "category": "File Handling",
    "codeExample": "with open('file.txt', 'r') as file:\n    content = file.read()\n    print(content)\n\nwith open('file.txt', 'r') as file:\n    for line in file:\n        print(line.strip())",
    "keywords": ["file", "read", "open", "with", "io"]
  },
  {
    "id": 5,
    "question": "What is the difference between a list and a tuple?",
    "answer": "Lists are mutable (can be changed) and use square brackets []. Tuples are immutable (cannot be changed) and use parentheses (). Tuples are faster and protect data from modification.",
    "category": "Data Structures",
    "codeExample": "my_list = [1, 2, 3]\nmy_list[0] = 10  # Works fine\n\nmy_tuple = (1, 2, 3)\nmy_tuple[0] = 10  # Error: tuples are immutable",
    "keywords": ["list", "tuple", "mutable", "immutable", "difference"]
  },
  {
    "id": 6,
    "question": "How do I handle exceptions in Python?",
    "answer": "Use try-except blocks to catch and handle errors. The try block contains code that might raise an exception, and except blocks handle specific errors.",
    "category": "Error Handling",
    "codeExample": "try:\n    number = int(input('Enter a number: '))\n    result = 10 / number\n    print(result)\nexcept ValueError:\n    print('Invalid input! Please enter a number.')\nexcept ZeroDivisionError:\n    print('Cannot divide by zero!')\nfinally:\n    print('Done!')",
    "keywords": ["exception", "error", "try", "except", "finally", "handling"]
  },
  {
    "id": 7,
    "question": "What is a lambda function?",
    "answer": "A lambda function is a small anonymous function defined with the lambda keyword. It can take any number of arguments but can only have one expression.",
    "category": "Functions",
    "codeExample": "# Regular function\ndef add(x, y):\n    return x + y\n\n# Lambda equivalent\nadd_lambda = lambda x, y: x + y\n\nprint(add_lambda(5, 3))  # 8\n\n# Used with map\nnumbers = [1, 2, 3, 4]\nsquared = list(map(lambda x: x**2, numbers))\nprint(squared)  # [1, 4, 9, 16]",
    "keywords": ["lambda", "anonymous", "function", "map", "filter"]
  },
  {
    "id": 8,
    "question": "How do I import modules in Python?",
    "answer": "Use the import statement to include modules in your code. You can import entire modules, specific functions, or use aliases for convenience.",
    "category": "Modules",
    "codeExample": "import math\nprint(math.pi)\n\nfrom math import sqrt\nprint(sqrt(16))\n\nimport random as rnd\nprint(rnd.randint(1, 10))",
    "keywords": ["import", "module", "package", "library", "from"]
  },
  {
    "id": 9,
    "question": "What is list comprehension?",
    "answer": "List comprehension is a concise way to create lists. It provides a shorter syntax when you want to create a new list based on the values of an existing list.",
    "category": "Data Structures",
    "codeExample": "# Traditional way\nsquares = []\nfor x in range(10):\n    squares.append(x**2)\n\n# List comprehension\nsquares = [x**2 for x in range(10)]\n\n# With condition\nevens = [x for x in range(10) if x % 2 == 0]\nprint(evens)  # [0, 2, 4, 6, 8]",
    "keywords": ["list comprehension", "shorthand", "generator", "expression"]
  },
  {
    "id": 10,
    "question": "How do I format strings in Python?",
    "answer": "Python offers multiple ways to format strings: f-strings (Python 3.6+), format() method, and % operator. F-strings are the most modern and readable.",
    "category": "Strings",
    "codeExample": "name = 'Alice'\nage = 25\n\n# f-string (recommended)\nmsg1 = f'{name} is {age} years old'\n\n# format() method\nmsg2 = '{} is {} years old'.format(name, age)\n\n# % operator (old style)\nmsg3 = '%s is %d years old' % (name, age)\n\nprint(msg1)",
    "keywords": ["string", "format", "f-string", "interpolation", "template"]
  },
  {
    "id": 11,
    "question": "What is the difference between == and is?",
    "answer": "== checks if values are equal, while 'is' checks if two variables point to the same object in memory (identity).",
    "category": "Operators",
    "codeExample": "a = [1, 2, 3]\nb = [1, 2, 3]\nc = a\n\nprint(a == b)  # True (same values)\nprint(a is b)  # False (different objects)\nprint(a is c)  # True (same object)",
    "keywords": ["comparison", "equality", "identity", "is", "=="]
  },
  {
    "id": 12,
    "question": "How do I create a dictionary?",
    "answer": "Dictionaries store key-value pairs. Create them using curly braces {} with key:value pairs separated by commas.",
    "category": "Data Structures",
    "codeExample": "person = {\n    'name': 'Alice',\n    'age': 25,\n    'city': 'New York'\n}\n\nprint(person['name'])  # Access value\nperson['email'] = 'alice@example.com'  # Add new key\n\n# Using dict() constructor\nperson2 = dict(name='Bob', age=30)",
    "keywords": ["dictionary", "dict", "key", "value", "hash", "map"]
  },
  {
    "id": 13,
    "question": "What are *args and **kwargs?",
    "answer": "*args allows a function to accept any number of positional arguments as a tuple. **kwargs allows any number of keyword arguments as a dictionary.",
    "category": "Functions",
    "codeExample": "def print_args(*args):\n    for arg in args:\n        print(arg)\n\nprint_args(1, 2, 3, 'hello')\n\ndef print_kwargs(**kwargs):\n    for key, value in kwargs.items():\n        print(f'{key}: {value}')\n\nprint_kwargs(name='Alice', age=25)",
    "keywords": ["args", "kwargs", "arguments", "parameters", "variadic"]
  },
  {
    "id": 14,
    "question": "How do I reverse a list?",
    "answer": "You can reverse a list using the reverse() method (in-place), reversed() function (returns iterator), or slicing [::-1] (creates new list).",
    "category": "Data Structures",
    "codeExample": "numbers = [1, 2, 3, 4, 5]\n\n# Method 1: reverse() - modifies original\nnumbers.reverse()\nprint(numbers)  # [5, 4, 3, 2, 1]\n\n# Method 2: slicing - creates new list\nnumbers = [1, 2, 3, 4, 5]\nreversed_nums = numbers[::-1]\nprint(reversed_nums)  # [5, 4, 3, 2, 1]\n\n# Method 3: reversed() - returns iterator\nfor num in reversed(numbers):\n    print(num)",
    "keywords": ["reverse", "list", "backwards", "slicing"]
  },
  {
    "id": 15,
    "question": "What is the purpose of __init__ in a class?",
    "answer": "__init__ is the constructor method called when creating a new instance of a class. It initializes the object's attributes.",
    "category": "OOP",
    "codeExample": "class Person:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n        print(f'Created person: {name}')\n    \n    def greet(self):\n        print(f'Hi, I am {self.name}')\n\nperson = Person('Alice', 25)\nperson.greet()",
    "keywords": ["init", "constructor", "class", "initialization", "self"]
  }
]
